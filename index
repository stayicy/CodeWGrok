<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mini Games Hub - All in One</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }
        .header {
            text-align: center;
            padding: 20px;
            background-color: #333;
            color: white;
        }
        .nav {
            background-color: #007bff;
            padding: 10px;
            text-align: center;
        }
        .nav button {
            margin: 0 10px;
            padding: 10px 20px;
            background-color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .nav button:hover {
            background-color: #e0e0e0;
        }
        .nav button.active {
            background-color: #ff6b6b;
            color: white;
        }
        .game-container {
            display: none;
            padding: 20px;
            text-align: center;
            max-width: 800px;
            margin: 0 auto;
        }
        .game-container.active {
            display: block;
        }
        h2 {
            color: #333;
        }
        canvas {
            border: 2px solid #333;
            background-color: #fff;
            margin: 10px 0;
        }
        #score {
            font-size: 1.5em;
            margin: 10px 0;
            color: #007bff;
        }
        #result {
            font-size: 2em;
            margin: 20px 0;
            color: #333;
        }
        button {
            padding: 10px 20px;
            font-size: 1.2em;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
        }
        button:hover {
            background-color: #0056b3;
        }
        .instructions {
            background-color: #fff;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Welcome to Mini Games Hub - All in One</h1>
        <p>Click the buttons below to play different games!</p>
    </div>
    
    <div class="nav">
        <button onclick="showGame('home')" id="home-btn" class="active">Home</button>
        <button onclick="showGame('target')" id="target-btn">Clicking Target Game</button>
        <button onclick="showGame('snake')" id="snake-btn">Snake Game</button>
        <button onclick="showGame('coin')" id="coin-btn">Coin Flip</button>
        <button onclick="showGame('roulette')" id="roulette-btn">Mini Game Roulette</button>
    </div>

    <div id="home" class="game-container active">
        <h2>Mini Games Collection</h2>
        <div class="instructions">
            <p><strong>Clicking Target Game:</strong> Click on the moving red targets to score points! New targets appear every second.</p>
            <p><strong>Snake Game:</strong> Use arrow keys to control the green snake. Eat the red food to grow and score points. Avoid walls and yourself!</p>
            <p><strong>Coin Flip:</strong> Click the button to simulate a coin flip - Heads or Tails?</p>
            <p><strong>Mini Game Roulette:</strong> Spin the wheel to randomly select one of the other games to play!</p>
        </div>
        <p>This site is hosted on GitHub Pages. All games are built with pure HTML5 and JavaScript - no external dependencies!</p>
    </div>

    <div id="target" class="game-container">
        <h2>Clicking Target Game</h2>
        <div class="instructions">
            <p>Click on the moving red targets to score points! New targets appear every second.</p>
        </div>
        <canvas id="targetCanvas" width="400" height="400"></canvas>
        <div id="targetScore">Score: 0</div>
        <button onclick="resetTargetGame()">Reset Game</button>
    </div>

    <div id="snake" class="game-container">
        <h2>Snake Game</h2>
        <div class="instructions">
            <p>Use arrow keys to move the snake. Eat the red food to grow and score! Avoid hitting walls or yourself.</p>
        </div>
        <canvas id="snakeCanvas" width="400" height="400"></canvas>
        <div id="snakeScore">Score: 0</div>
        <button onclick="resetSnakeGame()">Reset Game</button>
    </div>

    <div id="coin" class="game-container">
        <h2>Coin Flip</h2>
        <div class="instructions">
            <p>Click the button to flip a virtual coin and see if it's Heads or Tails!</p>
        </div>
        <button id="flipButton">Flip Coin</button>
        <div id="coinResult"></div>
        <button onclick="resetCoinFlip()">Reset</button>
    </div>

    <div id="roulette" class="game-container">
        <h2>Mini Game Roulette</h2>
        <div class="instructions">
            <p>Click "Spin" to randomly select one of the other mini games to play!</p>
        </div>
        <button id="spinButton">Spin the Wheel</button>
        <div id="rouletteResult"></div>
        <button onclick="resetRoulette()">Reset</button>
    </div>

    <script>
        // Navigation functions
        function showGame(gameId) {
            // Hide all containers
            const containers = document.querySelectorAll('.game-container');
            containers.forEach(container => container.classList.remove('active'));
            
            // Remove active class from all buttons
            const buttons = document.querySelectorAll('.nav button');
            buttons.forEach(btn => btn.classList.remove('active'));
            
            // Show selected container and activate button
            document.getElementById(gameId).classList.add('active');
            document.getElementById(gameId + '-btn').classList.add('active');
            
            // Initialize or resume specific games if needed
            if (gameId === 'target') initTargetGame();
            if (gameId === 'snake') initSnakeGame();
        }

        // Clicking Target Game
        let targetCanvas, targetCtx, targetScoreDisplay, targetScore = 0, targetGameActive = false, targetTargets = [];
        let targetGameInterval, targetAnimationId;

        class Target {
            constructor() {
                this.x = Math.random() * (targetCanvas.width - 20) + 10;
                this.y = Math.random() * (targetCanvas.height - 20) + 10;
                this.radius = 15;
                this.dx = (Math.random() - 0.5) * 4;
                this.dy = (Math.random() - 0.5) * 4;
                this.life = 3000; // 3 seconds
                this.startTime = Date.now();
            }

            draw() {
                targetCtx.beginPath();
                targetCtx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                targetCtx.fillStyle = 'red';
                targetCtx.fill();
                targetCtx.strokeStyle = 'darkred';
                targetCtx.lineWidth = 2;
                targetCtx.stroke();
                targetCtx.closePath();
            }

            update() {
                this.x += this.dx;
                this.y += this.dy;
                if (this.x - this.radius < 0 || this.x + this.radius > targetCanvas.width) this.dx = -this.dx;
                if (this.y - this.radius < 0 || this.y + this.radius > targetCanvas.height) this.dy = -this.dy;
                
                // Remove old targets
                if (Date.now() - this.startTime > this.life) {
                    targetTargets = targetTargets.filter(t => t !== this);
                }
            }
        }

        function addTarget() {
            if (targetGameActive) {
                targetTargets.push(new Target());
            }
        }

        function targetGameLoop() {
            if (!targetGameActive) return;
            
            targetCtx.clearRect(0, 0, targetCanvas.width, targetCanvas.height);
            
            targetTargets.forEach(target => {
                target.update();
                target.draw();
            });
            
            targetAnimationId = requestAnimationFrame(targetGameLoop);
        }

        function initTargetGame() {
            if (!targetGameActive) {
                targetGameActive = true;
                targetGameLoop();
                targetGameInterval = setInterval(addTarget, 1500);
            }
        }

        function resetTargetGame() {
            targetGameActive = false;
            cancelAnimationFrame(targetAnimationId);
            clearInterval(targetGameInterval);
            targetTargets = [];
            targetScore = 0;
            targetScoreDisplay.textContent = `Score: ${targetScore}`;
            targetCtx.clearRect(0, 0, targetCanvas.width, targetCanvas.height);
        }

        // Setup target game event listeners
        document.addEventListener('DOMContentLoaded', function() {
            targetCanvas = document.getElementById('targetCanvas');
            targetCtx = targetCanvas.getContext('2d');
            targetScoreDisplay = document.getElementById('targetScore');

            targetCanvas.addEventListener('click', (e) => {
                if (!targetGameActive) return;
                const rect = targetCanvas.getBoundingClientRect();
                const clickX = e.clientX - rect.left;
                const clickY = e.clientY - rect.top;
                
                targetTargets = targetTargets.filter(target => {
                    const dist = Math.sqrt((clickX - target.x) ** 2 + (clickY - target.y) ** 2);
                    if (dist <= target.radius) {
                        targetScore++;
                        targetScoreDisplay.textContent = `Score: ${targetScore}`;
                        // Add hit effect
                        targetCtx.fillStyle = 'gold';
                        targetCtx.beginPath();
                        targetCtx.arc(target.x, target.y, target.radius + 5, 0, Math.PI * 2);
                        targetCtx.fill();
                        setTimeout(() => targetCtx.clearRect(target.x - target.radius - 5, target.y - target.radius - 5, target.radius * 2 + 10, target.radius * 2 + 10), 100);
                        return false;
                    }
                    return true;
                });
            });
        });

        // Snake Game
        let snakeCanvas, snakeCtx, snakeScoreDisplay, snakeScore = 0, snakeGameActive = false;
        let snake, dx, dy, food, snakeGameInterval, snakeAnimationId;
        const blockSize = 20;

        function initSnake() {
            snake = [{ x: 200, y: 200 }];
            dx = blockSize;
            dy = 0;
            food = { 
                x: Math.floor(Math.random() * (snakeCanvas.width / blockSize)) * blockSize, 
                y: Math.floor(Math.random() * (snakeCanvas.height / blockSize)) * blockSize 
            };
            snakeScore = 0;
            snakeScoreDisplay.textContent = `Score: ${snakeScore}`;
        }

        function drawSnake() {
            snake.forEach((part, index) => {
                snakeCtx.fillStyle = index === 0 ? 'darkgreen' : 'green';
                snakeCtx.fillRect(part.x, part.y, blockSize, blockSize);
                snakeCtx.strokeStyle = '#228B22';
                snakeCtx.strokeRect(part.x, part.y, blockSize, blockSize);
            });
        }

        function drawFood() {
            snakeCtx.fillStyle = 'red';
            snakeCtx.fillRect(food.x, food.y, blockSize, blockSize);
            snakeCtx.strokeStyle = 'darkred';
            snakeCtx.strokeRect(food.x, food.y, blockSize, blockSize);
        }

        function moveSnake() {
            const head = { x: snake[0].x + dx, y: snake[0].y + dy };
            snake.unshift(head);
            
            if (head.x === food.x && head.y === food.y) {
                snakeScore++;
                snakeScoreDisplay.textContent = `Score: ${snakeScore}`;
                food = { 
                    x: Math.floor(Math.random() * (snakeCanvas.width / blockSize)) * blockSize, 
                    y: Math.floor(Math.random() * (snakeCanvas.height / blockSize)) * blockSize 
                };
                // Ensure food doesn't spawn on snake
                while (snake.some(part => part.x === food.x && part.y === food.y)) {
                    food = { 
                        x: Math.floor(Math.random() * (snakeCanvas.width / blockSize)) * blockSize, 
                        y: Math.floor(Math.random() * (snakeCanvas.height / blockSize)) * blockSize 
                    };
                }
            } else {
                snake.pop();
            }
        }

        function checkCollision() {
            const head = snake[0];
            if (head.x < 0 || head.x >= snakeCanvas.width || head.y < 0 || head.y >= snakeCanvas.height) return true;
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) return true;
            }
            return false;
        }

        function snakeGameLoop() {
            if (!snakeGameActive) return;
            
            if (checkCollision()) {
                alert(`Game Over! Final Score: ${snakeScore}`);
                resetSnakeGame();
                return;
            }
            
            snakeCtx.clearRect(0, 0, snakeCanvas.width, snakeCanvas.height);
            drawFood();
            moveSnake();
            drawSnake();
            
            snakeAnimationId = setTimeout(snakeGameLoop, 150);
        }

        function initSnakeGame() {
            if (!snakeGameActive) {
                snakeGameActive = true;
                initSnake();
                snakeGameLoop();
            }
        }

        function resetSnakeGame() {
            snakeGameActive = false;
            clearTimeout(snakeAnimationId);
            snakeCtx.clearRect(0, 0, snakeCanvas.width, snakeCanvas.height);
            initSnake();
        }

        // Setup snake game event listeners
        document.addEventListener('DOMContentLoaded', function() {
            snakeCanvas = document.getElementById('snakeCanvas');
            snakeCtx = snakeCanvas.getContext('2d');
            snakeScoreDisplay = document.getElementById('snakeScore');

            document.addEventListener('keydown', (e) => {
                if (!snakeGameActive) return;
                switch(e.key) {
                    case 'ArrowUp':
                        if (dy !== blockSize) { dx = 0; dy = -blockSize; }
                        break;
                    case 'ArrowDown':
                        if (dy !== -blockSize) { dx = 0; dy = blockSize; }
                        break;
                    case 'ArrowLeft':
                        if (dx !== blockSize) { dx = -blockSize; dy = 0; }
                        break;
                    case 'ArrowRight':
                        if (dx !== -blockSize) { dx = blockSize; dy = 0; }
                        break;
                }
            });
        });

        // Coin Flip Game
        const flipButton = document.getElementById('flipButton');
        const coinResultDisplay = document.getElementById('coinResult');

        flipButton.addEventListener('click', () => {
            const outcomes = ['Heads', 'Tails'];
            const randomOutcome = outcomes[Math.floor(Math.random() * outcomes.length)];
            coinResultDisplay.innerHTML = `<strong>${randomOutcome}!</strong>`;
            coinResultDisplay.style.color = randomOutcome === 'Heads' ? '#ffd700' : '#c0c0c0';
            
            // Simple animation
            coinResultDisplay.style.transform = 'scale(1.2)';
            setTimeout(() => {
                coinResultDisplay.style.transform = 'scale(1)';
            }, 200);
        });

        function resetCoinFlip() {
            coinResultDisplay.textContent = '';
            coinResultDisplay.style.color = '#333';
        }

        // Roulette Game
        const spinButton = document.getElementById('spinButton');
        const rouletteResultDisplay = document.getElementById('rouletteResult');
        const games = [
            { name: 'Clicking Target Game', id: 'target', color: '#ff6b6b' },
            { name: 'Snake Game', id: 'snake', color: '#4ecdc4' },
            { name: 'Coin Flip', id: 'coin', color: '#ffd93d' }
        ];

        spinButton.addEventListener('click', () => {
            const randomIndex = Math.floor(Math.random() * games.length);
            const selectedGame = games[randomIndex];
            
            rouletteResultDisplay.innerHTML = `
                <strong style="color: ${selectedGame.color}">🎰 You landed on: ${selectedGame.name}!</strong><br>
                <button onclick="showGame('${selectedGame.id}')" style="margin-top: 10px; background-color: ${selectedGame.color}">Play ${selectedGame.name}</button>
            `;
            
            // Spinning animation
            spinButton.style.transform = 'rotate(360deg)';
            spinButton.style.transition = 'transform 1s';
            setTimeout(() => {
                spinButton.style.transform = 'rotate(0deg)';
                spinButton.style.transition = 'none';
            }, 1000);
        });

        function resetRoulette() {
            rouletteResultDisplay.innerHTML = '';
        }

        // Initialize home view
        showGame('home');
    </script>
</body>
</html>
